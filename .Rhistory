library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
data.table::fread("temp_prec_middle_encrypted.csv.bz2")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
data.table::fread("temp_prec_middle_encrypted.csv.bz2")
## filter out North American observations
decryptdata <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
install.packages("decrpyt")
data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
df$time <- as.Date(df$time)
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
##decryptdata <-
data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
##decryptdata <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
##decryptdata <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
##decryptdata <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
##decryptdata <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
##df <- decrypt::decryptData(decryptdata)
df <- data.table::fread("temp_prec_tiny.csv.bz2")
## filter out North American observations
df$time <- as.Date(df$time)
NA_DATA <- df %>%
filter(longitude < 350) %>%
filter(latitude < 80) %>%
filter(longitude > 200) %>%
filter(latitude > 20)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
rm(df)
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
NA_DATA_1960 <- NA_DATA %>%
filter(time >= "1960-02-01") %>%
filter(time <= "1960-06-30")
NA_DATA_1986 <- NA_DATA %>%
filter(time >= "1986-06-01") %>%
filter(time <= "1986-06-30")
NA_DATA_2014 <- NA_DATA %>%
filter(time >= "2014-06-01") %>%
filter(time <= "2014-06-30")
## select jpg graphics device
png(filename = "life_expectancy_plot.png")
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1960, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_1986, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = airtemp)) + coord_quickmap()
ggplot(NA_DATA_2014, aes(longitude, latitude)) +
geom_point(aes(colour = precipitation)) + coord_quickmap()
dev.off()
## select the correct year - plot longitude-latitude and color according to the temp/prec variable
## I recommend to use ggplot() but you can use something else too.
##
## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
## makes the map scale to look better.  You can also pick a particular map projection, look
## the documentation.  (You need 'mapproj' library).
## Warning: map projections may be slow (several minutes per plot).
## close the device
## -------------------- you are done.  congrats :-) --------------------
shiny::runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
runApp('Desktop/info201/a8-app-dma150/UFOData')
shiny::runApp('Desktop/info201/a8-app-dma150/UFOData2')
install.packages("DT")
library(DT)
shiny::runApp('Desktop/info201/finals')
runApp('Desktop/info201/finals')
runApp('Desktop/info201/finals')
install.packages("DT")
shiny::runApp('Desktop/info201/finals')
runApp('Desktop/info201/finals')
runApp('Desktop/info201/finals')
install.packages("plotly")
library(plotly)
runApp('Desktop/info201/finals')
shiny::runApp()
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
install.packages("shinycssloaders")
shiny::runApp()
install.packages("plotly")
runApp()
runApp()
install.packages("shinycssloaders")
